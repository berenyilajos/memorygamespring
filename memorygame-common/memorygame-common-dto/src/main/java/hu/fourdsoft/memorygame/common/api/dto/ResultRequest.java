/*
 * Memorygame rest app
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package hu.fourdsoft.memorygame.common.api.dto;

import java.util.Date;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;

/**
 * ResultRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-04-16T18:48:44.853Z[GMT]")public class ResultRequest   {
  @JsonProperty("userId")
  private Long userId = null;

  @JsonProperty("seconds")
  private Integer seconds = null;

  public ResultRequest userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   **/
  @JsonProperty("userId")
  @Schema(required = true, description = "")
  @NotNull
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  @JsonProperty("resultDate")
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", timezone = "Europe/Budapest")
  private Date resultDate = null;

  @JsonProperty("resultDateTime")
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", timezone = "Europe/Budapest")
  private Date resultDateTime = null;

  public ResultRequest seconds(Integer seconds) {
    this.seconds = seconds;
    return this;
  }

  /**
   * Get seconds
   * minimum: 100
   * @return seconds
   **/
  @JsonProperty("seconds")
  @Schema(required = true, description = "")
  @NotNull
  @Min(150)  public Integer getSeconds() {
    return seconds;
  }

  public void setSeconds(Integer seconds) {
    this.seconds = seconds;
  }

  public ResultRequest resultDate(Date resultDate) {
      this.resultDate = resultDate;
      return this;
  }

  /**
   * Get resultDate
   * @return resultDate
   **/
  @JsonProperty("resultDate")
  @Schema(format = "date", description = "")
  @NotNull
  public Date getResultDate() {
      return resultDate;
  }

  public void setResultDate(Date resultDate) {
      this.resultDate = resultDate;
  }

  public ResultRequest resultDateTime(Date resultDateTime) {
      this.resultDateTime = resultDateTime;
      return this;
  }

  /**
   * Get resultDateTime
   * @return resultDateTime
   **/
  @JsonProperty("resultDateTime")
  @Schema(format = "date-time", description = "")
  public Date getResultDateTime() {
      return resultDateTime;
  }

  public void setResultDateTime(Date resultDateTime) {
      this.resultDateTime = resultDateTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultRequest resultRequest = (ResultRequest) o;
    return Objects.equals(this.userId, resultRequest.userId) &&
        Objects.equals(this.seconds, resultRequest.seconds) &&
        Objects.equals(this.resultDate, resultRequest.resultDate) &&
        Objects.equals(this.resultDateTime, resultRequest.resultDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, seconds, resultDate, resultDateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultRequest {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(resultDate)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(resultDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
